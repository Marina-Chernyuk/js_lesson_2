'use strict';

// В заданиях иногда изменяла названия переменных, чтобы не было конфликта!

// 1 ЗАДАНИЕ
// пример 1
/*
 переменной а присваевается значение 1
 переменной b присваевается значение 1
 значения переменных c и d не определены (undefined)
 Переменная а, имеющая инкремент в префиксной форме,
   сначала увеличится на единицу, а потом передаст своё значение переменной с
   то есть: 1+1=2 новое значение переменной а, присвоится переменной с и выведется на экран
 */
let a = 1, b = 1, c, d;
c = ++a;
alert(c); // ответ 2

// пример 2
/*
переменная b= 1
переменная b имеет инкремент в постфиксной форме,
 поэтому сначала передаёт своё значение переменной d, а потом увеличивается на 1
Переменой d присваевается значение переменной b, которое выводится на экран  и равно 1
*/
d = b++;
alert(d); //ответ: 1

//пример 3
/*
Переменная а имеет значение 2
Переменная а имеет инкремент в префиксной форме и она увеличивается на 1, получается 3
2+3(новое значение переменной а)=5
Переменной с присваевается значение 5, которое выводится на экран
*/
c = 2 + ++a;
alert(c); //ответ: 5

//пример 4
/*
Переменная b = 2 и имеет инкремент в постфиксной форме,
 а значит сначала суммируется с 2, в следствии чего получается значение 4, которое присваевается переменной d
 и выводится на экран.
Уже после того как присвоилось новое значение переменной d, переменная b увеличивается на 1 и принимает новой значение 3
 */
d = 2 + b++;
alert(d); //ответ: 4

/*
Переменная а имеет значение 3, которое принимает в примере №3,
т.к. имея значение 2 и инкремент в префиксной форме увеличивается на 1, а значит получает новое значение =3,
 которое выводится на экран
Переменная b имеет значение 3, которое принимает в примере №4,
т.к. имея значение 2 и инкремент в постфиксной форме увеличивается на 1, а значит получает новое значение =3,
 которое выводится на экран
 */
alert(a); //3
alert(b); //3

// 2 ЗАДАНИЕ
/*
Выражение (a *= 2) - это краткая форма записи, где имеется совмещённый оператор *=,
 которую можно представить как (a = a * 2) и после вычисления переменная y примет значение равное 4 (2*2=4)
х = 1 + 4
Переменной х присвоится значение 5
Поочереди выводим значения переменных на экран
 */
a = 2;
let x = 1 + (a *= 2);
alert(a);
alert(x)

// 4 ЗАДАНИЕ

a = 7
b = 5

/**
 * Функция производит математическое действие - сложение
 * @param {number} a.
 * @param {number} b.
 * @returns {number}
 */
function  sum(a ,b) {
    return a + b;
}
let result = sum(a, b);
alert(result);

/**
 * Функция производит математическое действие - вычитание.
 * @param {number} a.
 * @param {number} b.
 * @returns {number}
 */
function  subtraction(a ,b) {
    return a - b;
}
result = subtraction(a, b);
alert(result);

/**
 * Функция производит математическое действие - умножение
 * @param {number} a.
 * @param {number} b.
 * @returns {number}
 */
function  multiplication(a ,b) {
    return a * b;
}
result = multiplication(a, b);
alert(result);

/**
 * Функция производит математическое действие - деление
 * @param {number} a.
 * @param {number} b.
 * @returns {number}
 */
function  division(a ,b) {
    return a / b;
}
result = (division(a, b));
alert(result);


// 5 ЗАДАНИЕ

/**
 * Функция получает значения двух чисел и производит с ними математические действия.
 * @param {number} arg1.
 * @param {number} arg2.
 * @param {string} operation поддерживает значения "сумма", "вычитание", "деление" и "умножение"
 * @returns {number}
 * В case "деление" результат вычислений округляется до ближайшего целого числа.
 */

function mathOperation(arg1, arg2, operation) {
    switch (operation) {
        case "сумма":
            return sum(arg1, arg2);
        case "вычитание":
            return subtraction(arg1, arg2);
        case "умножение":
            return multiplication(arg1, arg2);
        case "деление":
            return Math.round(division(arg1, arg2));
    }
}
alert (mathOperation(4, 6, 'сумма'));
alert (mathOperation(7, 5, 'вычитание'));
alert (mathOperation(-3, 3, 'умножение'));
alert (mathOperation(20, -7, 'деление'));


